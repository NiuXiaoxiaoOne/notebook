Linux终端快捷键

date: 显示时间
whoami: 当前用户登陆标识
who: 显示所有登陆过的用户信息(w 也可以更加详细)
c’ + d / exit / logout : 注销当前用户的三种方法
passwd 修改密码

last + 用户名 ： 查看该用户的所有登录记录
last: 查看所有的登录记录
在火狐浏览器中，a’ + f 打开文件， a’ + q 退出软件

在GUI界面中，任何地方，点击a’ 开启、关闭搜索
a’ + tab: 在一个桌面中，多任务切换

ubuntu多个desktop创建，设置，外观，打开工作区，可以同时运行四个桌面，快捷键为c’ + a’ + 上下左右键

c’ + z a x c v 撤销、全选、剪切、复制、粘贴

在文本中，按住s’不放，点一下开头和结尾，自动将中间的全部字符选住。

1.用户间的切换 ——————————————————————

当你在用户a的gui界面中使用cli界面时，你想要用用户b的身份去临时做点事情，方法如下：

方法1：
su 用户b : 进入用户b的身份，若再新建一个cli界面，用户仍然是用户a,用户b 只能在一个cli界面中。用exit退出

方法2：
su - 用户b: 再新建cli，用户将会是用户b

id:  显示当前用户id

less 文件.后缀：查看该文件的内容的快捷键：

1.b 2.空格 3.h 4.q 5./^name

功能：1.向后移动 2.向前移动 3.查看帮助 4.退出 5.搜索以name开头的某行。

c’ + p 在gli界面中，回显上一条命令，上下键也可以

2.重启与关机 ——————————————————————

首先切换到超级用户：sudo reboot: 重启系统 sudo shutdown now: 关机

echo $(TERM/某环境变量/SHELL) : 显示终端型号，显示某环境变量，查看shell类型

printenv: 查看本机所有环境变量

[快捷键集合] 在CLI界面中，C’来表示Ctrl

c' + h : 从左至右删除第一个字符

c’ + w ： 删除最近写入的一个单词

c’ + / ： 撤销上一个操作

c’ + d ： 退出终端，若有字符的话，则执行的功能是删除当前光标所在的字符

c’ + \ ： 退出终端中正在运行的py程序

c’ + c : 终止程序

c’ + u ： 删除整行

c’ + m ： 相当于回车

less [file…] : 显示多个文件的内容

stty -a 显示键盘快捷键设置

stty 某命令 ^快捷键(大写) : 修改快捷键

上键 and 下键 ： 向前、后显示历史命令

reset : 初始化终端

3.查看某程序是否可以使用 ——————————————————————

which [某命令…]
type [某命令…]

cal 2018 ： 查看2018的日历

cal 12 2018 : 查看2018.12的日历

4.查看系统 ——————————————————————

hostname 查看系统名称

uname 查看操作系统

who 查看登陆信息

whoami 查看当前登陆用户名

w [用户名] 查看登陆用户的详细信息

5.bc计算器 ——————————————————————

bc 进入bc

bc -l 带加载函数库的dc

scale 查看可显示的小数位数

scale=30 自行设定可以显示的小数位数

6.帮助手册 ——————————————————————

[man使用]

man [某命令…] 

man -f [某命令…] 显示某命令的简介

[Web上搜索命令]

“man ls” ubuntu

[模糊搜索]

whatis/apropos [某命令…]

[联机手册]

info [某命令]

[info界面快捷键]：

q 退出

h 帮助向导

空格 下一页

删除键 上一页

b 当前页面开头

Tab 跳转至下一个链接处

s’ + Tab 跳到上一个链接处

回车 进入链接

l 退回到上一个链接界面

7.显示shell选项 ——————————————————————

set -o 查看所有的shell选项，on打开 off关闭

set -o 某shell : 打开

set +o 某shell : 关闭 

8.echo命令、强引用、弱引用 ——————————————————————

echo It\’s warm \; come over # \可以保证特殊符号使用的是本身的含义，比如;就只是一个标点

echo ‘It’s warm ; come over’ # ‘’称为强引用，它会将所有的特殊标点的作用使用为本身的意义

echo “It’s warm ; come over” # “”弱引用，除了;$号等指定的特殊符号使用规定的含义外，其余使用本身

echo “The time is `date`”  # 先执行``中的命令，然后将结果与当前命令结合

9.判断内置命令or外置命令 ——————————————————————

type date… 若是外置命令，则会返回一个目录

help 某命令 # help 可以判断一条命令是否是内置，若是则返回某命令的功能

help # 返回一个内置命令组成的list

help -s 某命令 # 只查看其语法

10.修改环境变量 (p257) ——————————————————————

export PATH=“输入内容”

export PATH=“$PATH:某目录” # 将新的目录追加到旧的后面

export PATH=“某目录:$PATH”  # 添加到前面

11.历史命令列表 ——————————————————————

fc -l 显示所有的历史命令列表,有编号

fc -s 自动执行上一条命令

fc -s 某编号 ：执行指定编号命令

history 显示完整的命令列表

fc -s rm…   ： 执行最近的一条以rm开头的命令

!某编号:s/新字母/旧字母/ : 将指定编号中的某字母替换，并执行命令

{设置历史命令的存放条数p272}


12.为某命令创建别名 ——————————————————————

alias 某别名=‘某命令’ # 用强引用

alias 某别名 # 查看别名原始命令

alias 查看所有别名
naries 某别名 # 删除某别名

13.修改一个文件的内容 ——————————————————————

(1) sort > file1 :

将sort命令的输出到file1中;若file1不存在，则创建该文件；若文件存在，则覆盖该文件

注意:由于覆盖文件会导致原文件的内容消失，所以可设置noclobber变量来防止。
set -o/+o noclobber : 开启/关闭该shell选项，若真想覆盖，可以用 sort >| file1 来强制

(2) 反向读取

sort < file1 : 读取file1内容到sort程序中。

sort < file1 > file2 : 从file1中读取内容，然后经过sort程序处理，将结果输出到file2

14.文件描述符 ——————————————————————

0< 相当于 <
1> 相当于 > 
2> ： 标准错误输出

注意：这三种默认覆盖文件,可用>>在末尾进行追加

eg: sort 0< file1 1> file2 2> error-file

相当于 ： sort < file1 > file2 2> error-file

将file1中的内容输出到sort，将结果输出到file2中，若有错误，则输出到error-file

sort &> file2 # 将错误和结果都输出到file2中

15.子进程p317 ——————————————————————

在CLI界面中输入bash,就在当前的bash中创建了一个子进程bash,子进程发生任何变化都不会影响主进程

一种便捷的方式是: (date) # 直接返回在子进程中date的结果。

eg:现在我们有两个目录；d1,d2 当前位于d1中，我们要去执行d2中的zz命令

方法是：bash -> cd d2 -> export DATA=d2(切换程序) -> zz(执行程序) -> exit(退出到主进程)

更快的方法是：(cd d2; export DATA=d2; zz)

16.管道线p326 ——————————————————————

cat file1 | grep ls | wc -l

1)查看file1的内容，将结果往右传
2)抽出含有ls字母的行，将结果右传
3)wc单词统计命令，-l行统计，返回最终的行数

这相当于：
cat file1 > file2
grep ls < file2 > file3 # 先将file2推向左边的grep，最后将最终结果返回到file3
wc -l < file3

17.管道线分流p329 ——————————————————————

语法：tee [-a] file…
-a: 追加，默认直接覆盖
file…: 可多个文件

cat file1 | tree file2 file3 | grep ls

# 将cat file1结果输出到file2 file3中，在屏幕中显示grep ls的结果

eg: who | tee -a file2

18.条件执行p330 ——————————————————————

command1 && command2 # 若1成功了，执行2
command1 || command2 # 若1成功了，不执行2

eg: grep off file1 > /dev/null || echo “the None!”
# 查看file1中是否有包含off的行，若有则，不执行2

  ——————————— 过滤器 ———————————

19.cat p337 ——————————————————————

语法：cat file…

功能：
1)cat > datafile # 若目录无该文件，则创建该文件，并追加内容；若有该文件，则覆盖；可以用‘>>’来追加

2)cat < datafile # 显示文件内容

3)cat < datefile1 > file2 # 重定向标准输入和输出

20.split:将一个大文件拆分成多个小文件 p345 ——————————————————————
假设文件date有160行的数据

语法：split [-d(创建的文件名字是否包含数字)] [-a(创建文件名的总个数，即文件名的组成个数) num] [-l(每个文件包含原文件多少行，这会产生“原文件总行数/lines”个文件) lines] [file(要拆分的文件) [prefix(自行为新文件命名，以…开头)]]

1) split date 创建一个新文件，默认命名xaa xab xac…xba xbb… # 默认命名总共可创建26*26个文件，默认前缀为x

# 若加入-d，则变为x00,x01 … 可创建10*10个文件

2) split -d -a 3 file1 # 创建名字为3+1个，命名为x001,x002，这就不担心命名限制了

3) split -d -l 16 file1 # 要求每个新文件只能有16行，data中有160行，这会创建160/16个文件

4) split -d -l 16 file1 Ok # 创建10个文件，每个文件命名为Ok00 Ok01…

21.反转文本行顺序tac，将文本行上下颠倒 ——————————————————————

tac file1 > file2

反转每行的字符 rev 

eg: rev file1 | tac

22.打印首尾的某几行 ——————————————————————

head [-n number] file

tail [-n number] file

# 默认打印10行

cat file1 file2 file3 | sort | head -n 2 | less

删除指定列：colrm

colrm 1 4 # 删除从1-4列的所有字符，包括第1 4列。
colrm 1 # 从第1列删除到最后一列

比较两文件是否相同：cmp file1 file2 p354

23.比较有序文件—comm p355 ——————————————————————

注意： 首先要将文件排序：sort

语法： comm [-123] file1 file2

comm file1 file2 # 会产生3列输出，列1：file1独有 列2：file2独有 列3：共有的

comm -1 file1 file2 # 只输出列2 列3

24.比较无序文件—diff p357 ——————————————————————

注意：diff只能比较文本，而cmp可以比较任意文件

diff file1 file2 # diff的目的是：说明如何将第一个文件转化为第二个文件

输出：

2a3
kkkkkkb
>file2

解释：在第1文件的第二行处追加‘kkkkkkb’,该内容来自file2.

> 表示来自第二个文件 < 来自第一个文件

c: change 改变 a: append 追加 d: delete 删除

完整语法：diff [-bBiqswy] file1 file2

-b: 忽略有空白字符的，例如x x和x  x相同，xx和x x不同
-B: 忽略所有空白行
-i: 忽略大小写
-q: 忽略所有细节，只会打印是否相同
-s: 会显示打印相同，若相同则不输出任何东西
-w: 忽略所有空白字符，xx和x x相同

扩展完整语法：diff [-bBiqswy] [-c | -u]file1 file2 (p363)

eg:
diff -c file1 file2 # 输出较长
diff -u file1 file2 # 只输出file1中要改进的地方，以及上下文
diff -y file1 file2 # 并排显示，更易观看

25.diff扩展—sdiff p364 ——————————————————————

sdiff file1 file2 # 相当于diff中的-y功能

语法：sdiff [-bBilsW] [-w columns] file1 file2

-l: 当两文件有共同行时，只显示左边
-s: 不显示共同行
-w 30: 改变列宽为30
-W: 忽略所有空白字符

26.抽取数据列，删除剩下的。与colrm相反。—cut p369 ——————————————————————

语法: cut -c list [file…]

cut -c 1,2,3-5,7-11 file1 # 抽取出1 2 3-5 7-11行

eg: who | cut -c 1-8 | sort | uniq -c 

扩展语法：cut -f list [-d delimiter] [-s] [file…] 

注意：意思发生改变，变为抽取指定行的指定段

cut -f 1,3-5 -d ‘:’ -s file1 # delimiter为定界符，抽取1，3-5行中:前的段
-s # 若无定界符，则无论本行

27.将几个文件的数据抽取出来组成新的文件 — paste p371 ——————————————————————

语法： paste [-d char…] [file…]
paste -d ‘ ’ file1 file2 file3 # 三个文件以一个空格作为分界
paste -d ‘1%’ file1 file2 file3 # 第一个分界为1，第二个为%

28.建立行号—nl p377 ——————————————————————

1) nl默认会忽略空白行，但该命令使用后，并不会改变原文件
2) nl [-v start(首行标的数字，默认1)] [-i increment(增量，默认1)] [-b a(强制对空白行标号)] [file…]

统计行、单词、字数数量—wc:word count p378

1) wc file1 默认显示行，单词数，字符数
2) wc [-clLw] [file…]
-c: 只显示字符
-l: 只显示行
-L: 显示最长行长度
-w: 只显示单词数

eg: ls /etc | wc -l 统计/etc下有多少文件
who | wc -l 统计有多少用户
echo “There are `who | wc -l`”

29.将制表符转化为空格 — expand p384 ——————————————————————

expand [-t size] [file…]

expand file1 # 系统将自行调节转化为几个空格

expand -t 4 file1 # 将一个制表符转化为4个空格

将空格转化为制表符 — unexpand

unexpand [-a] [-t size] [file…]

程序默认只替换每行中开头的空格，-a 可以要求替换所有的空格

30.将文件中的每一行改为固定宽度 — fold p387

注意：fold更改的宽度 < 指定宽度

fold [-s(保证单词完整性)] [-w width(要求每行要多宽，即容纳多少字符)] [file…]

默认80字符。

31.格式化段落—— fmt p391 ——————————————————————

功能：将各段落的各行连接成指定宽度

fat [-s(只拆分长行，不拆分短行)u(使得单词间最多1个空格，末尾最多2个)] [-w width(指定行宽，默认75)] [file…]

按页格式化文本 —— pr(printout) p394

pr [-dt] [+beg[:end]] [-h text] [-l n] [-o margin] [-w windth] [file…]

-d:双倍行距 -t:只有一个标题，不分页
+beg:end 格式化的初始页到末尾页 eg: +4:5 只格式化第4-5页
-h text: 将标题设置为text
-l n: 规定每页n行
-o margin: 规定边缘的空格数量
-w width: 规定每行多少字符，即宽度

注意：默认每页66行，每页标题5行，每页页尾5行，每行62字符

扩展,按列格式化文本：

pr [-mt] [-columns(输出的列数量,如-2,-3)] [-l lines(每页的行数)] [-w windth(宽度，默认72)] [file…]

-m 合并：file1 file2

-t: 去除标题

eg: fat -w 35 file1 | pr -2 -l 40 | expend > file2

32.选取文件中包含特定模式的行 p401 ——————————————————————

grep [-cilLnrsvwx] pattern [file…]

-c: 查看所抽取的行的数量
-i: 忽略大小写
-l: 若对多个文件进行搜索，只显示包含特定模式的文件名
-L: 显示不包含特定模式的文件文件名
-n: 显示每行数据在原文件中的相对行号
-r: 递归搜索，还包括文件中的文件
-s: 不显示其他错误
-v: 显示非特定模式的行
-w: 只显示完整的特定模式的行
-x: 只显示整行中只有一个特定模式的行

eg: ls -F /etc | grep -c ‘/’ # 查看当前目录中有多少子目录

33.选取以特定模式开头的行 — look p408 ——————————————————————

look [-d(忽略标点和其他符号)f(忽略大小写)] pattern file…

注意：该命令只能在一段命令的开头使用，不能再管道线后；在使用该命令前，需要用sort排序一下

eg:
sort file1 file2 > file3
look -f A file3 

排序数据 —- sort p412

语法：sort [-dfnru] [-o outfile] [infile…]

-d: 只查看字母，数字、空白符等其他特殊符号自动忽略
-f: 忽略大小写
-n: 对数字开头的进行排序
r: 反向排序
u: 若出现开头一样的，只要一个
-o outfile: 将结果输出到outfield文件中

扩展：sort -cu [file…]
-c: 检查文件是否排序
-u: 检查文件是否有重复行，输出不重复的行

34.消除、选取、统计重复行；选取唯一行 uniq ——————————————————————

注意：输入的文件必须是有序的

uniq [-cdu] [infile] [outfile]]

-c: 统计重复的次数
-d: 只输出重复行
-u: 只输出非重复行

infile:输如文件 outfile: 输出文件

uniq file1: 输出文件的所有行，若有重复的，只保留一个

35.合并两个文件中的有序数据 — join p425 ——————————————————————

注意：使用前，先排序一下

join [-i] [-a1|-v1] [-a2|-v2] [-1 field1] [-2 field2] file1 file2

-i: 忽略大小写
-a1:输出无法匹配的file1文件的其他行
-v1:只输出无法匹配的file1文件的其他行
-1 field1: 指定与file2比较的字段，默认为1

eg:

join file1 file2 # 输出file1 file2默认字段相同的行
join -a1 -a2 file1 file2 # 输出所有行
join -v1 -v2 file1 file2 # 只输出不匹配的行

36.转换字符 -- (translate)tr p433 ——————————————————————

tr功能：转换字符；替代字符，如将多个字符转化为几个；删除指定的字符
注意：tr不能直接使用，需要重定向输入；tr只能一个一个替换，不像set可以连续替换字符

tr [-cds] [set1 [set2]]

-c: 将所有非set1中的字符，这里的set1类似于一个集合，将该集合的补集全部替换成set2中的
-d: 删除set1中的字符
-s: set1中有多个元素，而set2中只有一个，那么任意set1中的一个元素都会转化成set2中唯一的那个

tr a A < file1 > file2 # 将file1中的元素a转化为A，将结果输出到file2

tr ':?' \. < file1 > file2 # 若出现多个特殊字符，则用单引号引用。单个字符用反斜线；将:或?转化为.

tr abcde ab < file1 > file2 # 若数量不对称，则不对应的重复转化为set2的末尾元素

扩展：使用部分正则表达式

tr A-Z a-z < file1 > file2 # 将大写字母转化为小写

tr 0-9 A-I < file1 > file2

[:lower:] 可替换 a-z
[:upper:] A-Z
[:digit:] 0-9
[:alpha:] a-zA-Z

扩展2：转化不可显示字符

010：退格 011：制表符 012：新行 015：回车

tr '\012' '\011' < file1 > file2

# -s示意

tr 0-9 x < file1 > file2
相当于：
tr -s 0-9 A-I < file1 > file2

# -c示意

tr -c '\n2018a' 'xa' < file1 > file2

## -d示意
tr -d [:digit:] < file1 > file2

eg: cat file1 file2 | tr -cs [:alpha:]\' '\n' | sort -fn | wc -l

37.非交互式编辑器 (stream editor) --sed ——————————————————————

sed [-i(直接覆盖原文件)] command | -e command... [fiel...]

详解：set [-i] [/address|pattern/]s/search/replacement/[g]

address: 用来选择某行的地址
pattern: 字符串
search: 正则表达式
replacement： 将search替换成replacement
g: sed默认只替换每行匹配到的第一个，g可以替换所有

eg:

sed 's/harly/Harly/g' file1 将file1中所有的harly替换成Harly
sed 's/[mM]on/kon/g' file1 # 将mon或Mon替换成kon
sed 's/.$//' file1 # .指任意匹配，.$任意匹配每行最后一个字符，换成一个空串
sed '5s/har/Har/g' file1 # 将第5行的har转化为Har
set '5,10s...'
set '5,$s...'
set '/OK/s/Ok/11/g' # 将包含OK的行中的OK转化为11
set '/[0-9]/...' # 任意0-9

扩展2：-e 同时执行多个命令
set \
-e 's/mon/Mond/g' \
-e 's/sun/Sund/g' 

38.正则表达式 p488 ——————————————————————

grep Harley file1 # 匹配包含Harley的行
... '^Harley' ... # 匹配以Harley开头的行
... 'Harley$' ... # 匹配以Harley结尾的行
... '^Harley$' ... # 匹配整行中只有一个Harley的行
... '^$' ... # 匹配空行
... '\<kn' ... # 以kn开头的行
... 'ow\>' ... # 以ow结尾的
... '\<know\>' ... #  只包含know做整行的行

注意：
\< 和 \> 可以用\b表示和代替
任意字符包括字母 数字 下划线等

... 'c.t' ... # c.(.任意字符)t的行
... 'li[csz]e' ... # 包含lice/lise/lize的
... '21[[:alpha:]]' ... # 21任意字母
... '[[:upper:]][[:upper:]][[:digit:]]' ... 
... '[3-7]' ... # 包含3-7任意一个数字的
... 'x[0-9][0-9]' ... #

# 接下来是重复运算符
 
... 'H[[:lower:]]*' ... # H-小写字符-0个或多个任意字符
... 'error.*code' ... # error-任意字符-任意0个或多个字符-code
... ':.*:' ... # :-任意字符-任意0个或多个字符-:
... '(xyz){5}' ... # 将能匹配5次的组xyz的行找出
... 'cat|dog|bird' ... # 符合任意条件即可

39.less程序 ——————————————————————

less命令一览表p475

less [-IsmMN] [+command] [file...]

-I: 不区分大小写的搜索
-s: 将多个连续的空白行换成一个
-m: 显示百分比
-M: 显示当前行数和百分比
-N: 显示行号
command: 可以是从第几页开始，或者初始化的命令或正则

进入less界面后：

/ 向前搜索 ? 向后搜索 [支持正则]
	n 查找下一个 N 查找上一个

less file1 file2

less处理多个文件的指令 p483

进入多文件less界面：

:n 切换到下一个文件 :p 切换到上一个文件
:x 切换到第一个文件 :e 插入一个新文件
:d 删除当前文件  : 显示当前信息
:*pattern 向前搜索所有文件 ?*pattern 向后搜索

40.命名管道 p576 ——————————————————————

mkfifo fifo-1 # 创建一个自定义管道
rm fifo-1 # 删除管道


rm 删除某文件
rmdir 删除某空目录
rm -r 删除某非空目录

mv old_file.txt new_file.txt 若两文件放在同一目录，则是重命令。若不是，则是移动操作

41.目录栈 p612 ——————————————————————

栈：后入后出，栈顶即为当前目录
pushd [某目录|+n]： 将某目录压入栈。+n是指将指定栈移到栈顶，可通过dirs -v查看编号，n即编号

popd [+n] ：默认移除当前栈顶的目录,+n是移除指定栈

dirs [-c] [-v] [-l]

默认显示当前栈的内容。
-c: 移除除当前目录外的所有目录
-v: 以数字标识的方式显示栈
-l: 显示栈的完整目录

42.查看磁盘空间 ——————————————————————

适用于多文件: ls -s /bin # -sh可以以适合人类的方式显示
适用于单文件: du [-achs] [file...]

-a: 递归显示所有文件
-c: 显示文件数量
-h: 适用于人类的方式
-s: 只显示

ls某类文件的统配符 p632

磁盘空间统计程序 df -h

花括号拓展 touch rin{i,q,z} # 依次创建rini,rinq,rinz

cp old_name.txt 1.txt # 复制文件，为1.txt

mv 1.txt old_name.txt # 将1.txt复原为old_name.txt。1.txt将删除。

43.tree程序，将目录以树的形式显示 p641

tree [-adfFirsth] [-L level] [directory(目录名)...]

-a: 显示所有文件
-d: 只显示目录
-f: 显示完整路径
-F: 文件类型
-i: 省略缩进
-r: 相反顺序
-s: 显示文件大小
-t: 以修改时间排序
-h: 以人类视角显示大小
level: 递归深度

rm -r 递归删除

id # 显示当前用户的所有权限

chmod mode file... # 更改权限，mode为权限值 p667

44.locate 搜索文件，在数据库中搜索指定模式的文件 p678 ——————————————————————

locate [-bcirS] pattern...

-b: 从文件的最后一部分路径名进行匹配
-c: 只显示匹配到的总数
-i: 忽略大小写
-r: 正则
-S: 单独使用，不和其他任何参数搭配，用来统计当前数据库

xargs [-prt] [-i string] [command[argumeng]]

-p: 显示执行过程，但不会真正执行
-r: 若没有参数输入，则不执行命令
-t: 显示执行过程，同时执行命令
-i: 占位符
command: 命令，如cp

find . -name '[abcde]' | xargs -i -t {} {}.junk
# 将当前目录中的 a b c d e 文件重命名为后缀为.junk

45.系统 ——————————————————————

sleep interval[s|m|h|d] # 创建延迟程序

sleep 5m # 延迟5分钟

常见的系统调用 p697
c' + l 刷新屏幕
echo $$ 显示当前进程id
(sleep 20; cat /etc/passwd) & # 使得该程序后台运行。& 后台运行程序

ps # 显示当前process列表
jobs # 显示当前作业列表

sleep 5;echo 'hello!'

c' + z 挂起程序
fg 返回最近挂起的程序
c' + c 杀死程序
suspend 挂起当前的shell
fg %number 返回指定挂起的程序，可用jobs查看编号
 
& 的另一种实现方式：

c'+z挂起当前程序
jobs 查看挂起的程序编号
bg %number 命令程序后台运行

静态显示进程 Ps p716
动态显示进程 top p724

top -d delay -n count -p pid
top -d 30 -n 5 -p 5233 # 检测#5233程序，每30秒监测一次，共监测5次

显示文件树 tree
显示进程树 pstree p727
fuser p729
杀死进程 kill p731
链接的概念 p670
初始化文件、环境文件名称 p292


n.一些技巧 ——————————————————————

1.cp d1 d2; cp d1 d3; rm d1; ls

同时执行多行命令：为d1创建副本d2,d3，删除d1文件，并返回当前目录的文件数量

2. ls -l 某文件部分名 ： tab补全 tab*2显示所有相关的 

ls dd* : 查看以dd开头的

3.rm [file…]  删除一个或多个文件

rm dd* : 删除以dd开头的

4.ls -a 显示所有文件，包括隐藏文件

ls -F 标记子目录

cat name file 查看某种文件的命令

5.特殊的文件—任何发送给它的输出都会消失

/dev/null 
/dev/zero

who : 当前正在登陆系统的人员

whereis [command] # 查看某命令的文件路径；第一个目录是程序地址，第二个是说明书页

6.目录的显示标识

ls /bin/passwd # /在开头表示根目录，在中间则代表分界符

/(root目录)~(用户目录)/..(父目录)/.(子目录)
~Jake 指定前往Jake用户标识所在的目录，默认是当前用户

ls -Fla : 带颜色，详细显示，隐藏文件
详细显示：显示上一次的修改时间, -lu 上一次访问时间

ls -lrth: 按有旧到新排列文件
file 某对象 # 检查文件类型。文件类型对照表 p639 文件权限 p665

/etc/group 权限显示文件

[变量]
env 显示所有的环境变量

set 查看所有的shell变量

HERRL=xiao # 创建一个变量，变量名要大写

echo $HERRL # 查看变量

unset HERRL # 删除变量

HERRL=“/usr/bin:” # 长字符需要双引号

——————————————————————

标准I/O重定向目录 p323

有用的过滤器列表 p341

用于比较文件的过滤器列表 p354

ASCII码参考页 p417

C区域与en_US区域排序比较 p420 改变区域设置 422
注意：Ubuntu默认en_us格式，登陆文件、环境变量的改变都要重启后才能显示效果。

偏序创建全序 tsort p433

一般使用的是扩展正则，原先的是基本正则，基本正则的限制 p451

文件显示程序汇总 p471

more基本命令 p486

十六、二、八进制间的约定 p496

显示二进制文件 hexdump od学习 p498

系统中的特殊文件 p573
特殊的文件内容：任何输入都会被抛弃。 /dev/null /dev/zero
存放程序文件的目录 p590
/usr目录的内容 p587
