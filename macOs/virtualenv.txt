1.virtualenv

pip3 install virtualenv                          # 安装
virtualenv --no-site-packages venv               # 新建一个名叫venv的python环境
	--no-site-packages        # 指的是不带任何第三方包的“干净”的Python运行环境，但有pip功能
virtualenv name                  # 新建一个环境，也是干净的

virtualenv --system-site-packages <name> # 创建一个继承全局的运行环境，与系统的一样

source venv/bin/activate         # 进入vent环境
python                           # 进入python界面
在python界面外，可通过pip查看安装的包，对包进行管理

virtualenv -p /usr/bin/python2.7 env # 创建一个python2.7版本的名叫env的环境

deactivate                           # 退出vent环境
# 请手动删除虚拟环境

2.virtualenvwrapper



mkvirtualenv env     # 创建一个名叫env的虚拟环境

workon env           # 直接根据名字就能进入虚拟环境
workon               # 查看有多少虚拟环境

deactivate           # 退出虚拟环境

rmvirtualenv env     # 删除名叫env的虚拟环境

mkvirtualenv -p /usr/bin/python2.7 env  # 指定版本内容


参考自<https://www.cnblogs.com/anpengapple/p/6430022.html>

链接2:virtualenv官网：
https://virtualenv.pypa.io/en/stable/


3.pipenv

pip3 install pipenv # 安装piping
I
# 把用户目录下bin放在最前面，这样可以直接使用pipenv了

pipenv install  # 创建一个虚拟环境,创建的环境版本是系统默认的系统，同时其会复制全局所安装的包
pipenv shell    # 激活虚拟环境
exit  # 退出虚拟环境

更改版本：
pipenv --three # 初始化python3
pipenv --two   # 初始化python2
pipenv shell   # 激活后就是你想初始化的版本了

其他的：
pipenv —-<name>
	venv 输出virtualenv信息
	py 输出Python解释器信息
	rm 删除virtualenv
	python <版本号> 指定创建初始化的版本
	clear 清除缓存
	version 显示版本并退出 

在激活环境后：
	pipenv install <包名> # 安装包
	pipenv uninstall <包名> # 卸载包
	pipenv uninstall --all # 清除虚拟环境中的所有文件，但保持Pipfile不变,这可以使包变回最初状态
	pipenv uninstall --all-dev # 从虚拟环境中删除所有开发包，并从Pipfile中删除它们

urllib2安装：

pip／pipenv install apscheduler -i https://pypi.douban.com/simple


https://zhuanlan.zhihu.com/p/32913361
https://pipenv.readthedocs.io/en/latest/
https://cuiqingcai.com/5846.html